// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xxx.Repository.Models;

#nullable disable

namespace xxx.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241022080135_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("xxx.Repository.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Steven Spielberg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Christopher Nolan"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Martin Scorsese"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ridley Scott"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Peter Jackson"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lana Wachowski"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Justin Lin"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Quentin Tarantino"
                        },
                        new
                        {
                            Id = 9,
                            Name = "James Cameron"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Alex Kurtzman"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Shawn Levy"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Michael Bay"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Roland Emmerich"
                        });
                });

            modelBuilder.Entity("xxx.Repository.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "fantasy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "musicals"
                        },
                        new
                        {
                            Id = 8,
                            Name = "mystery"
                        },
                        new
                        {
                            Id = 9,
                            Name = "romance"
                        },
                        new
                        {
                            Id = 10,
                            Name = "sci-fi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "sports"
                        },
                        new
                        {
                            Id = 12,
                            Name = "thriller"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("xxx.Repository.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorId = 1,
                            DurationMinutes = 127,
                            GenreId = 12,
                            Title = "Jurassic Park"
                        },
                        new
                        {
                            Id = 2,
                            DirectorId = 2,
                            DurationMinutes = 169,
                            GenreId = 10,
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = 3,
                            DirectorId = 3,
                            DurationMinutes = 126,
                            GenreId = 8,
                            Title = "Hugo"
                        },
                        new
                        {
                            Id = 4,
                            DirectorId = 4,
                            DurationMinutes = 144,
                            GenreId = 4,
                            Title = "The Martian"
                        },
                        new
                        {
                            Id = 5,
                            DirectorId = 5,
                            DurationMinutes = 201,
                            GenreId = 5,
                            Title = "The Lord of the Rings: The Return of the King"
                        },
                        new
                        {
                            Id = 6,
                            DirectorId = 6,
                            DurationMinutes = 136,
                            GenreId = 10,
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = 7,
                            DirectorId = 7,
                            DurationMinutes = 107,
                            GenreId = 12,
                            Title = "Fast & Furious"
                        },
                        new
                        {
                            Id = 8,
                            DirectorId = 8,
                            DurationMinutes = 111,
                            GenreId = 1,
                            Title = "Kill Bill: Vol. 1"
                        },
                        new
                        {
                            Id = 9,
                            DirectorId = 9,
                            DurationMinutes = 162,
                            GenreId = 5,
                            Title = "Avatar"
                        },
                        new
                        {
                            Id = 10,
                            DirectorId = 10,
                            DurationMinutes = 111,
                            GenreId = 6,
                            Title = "The Mummy"
                        },
                        new
                        {
                            Id = 11,
                            DirectorId = 11,
                            DurationMinutes = 108,
                            GenreId = 3,
                            Title = "Night at the Museum"
                        },
                        new
                        {
                            Id = 12,
                            DirectorId = 12,
                            DurationMinutes = 144,
                            GenreId = 1,
                            Title = "Transformers "
                        },
                        new
                        {
                            Id = 13,
                            DirectorId = 13,
                            DurationMinutes = 131,
                            GenreId = 12,
                            Title = "White House Down"
                        });
                });

            modelBuilder.Entity("xxx.Repository.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Greate Movie",
                            MovieId = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Not bad.",
                            MovieId = 2,
                            Rating = 3
                        },
                        new
                        {
                            Id = 3,
                            Comment = "not gona watch again",
                            MovieId = 3,
                            Rating = 1
                        },
                        new
                        {
                            Id = 4,
                            Comment = "awesome movie love the aactor that is left on mars",
                            MovieId = 4,
                            Rating = 9
                        },
                        new
                        {
                            Id = 5,
                            Comment = "could be better",
                            MovieId = 5,
                            Rating = 2
                        },
                        new
                        {
                            Id = 6,
                            Comment = "good movie",
                            MovieId = 6,
                            Rating = 6
                        },
                        new
                        {
                            Id = 7,
                            Comment = "i am gona watch this with my familie next time",
                            MovieId = 7,
                            Rating = 8
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Love lovie this movie",
                            MovieId = 8,
                            Rating = 7
                        },
                        new
                        {
                            Id = 9,
                            Comment = "awesome",
                            MovieId = 9,
                            Rating = 6
                        },
                        new
                        {
                            Id = 10,
                            Comment = "good movie love it ",
                            MovieId = 10,
                            Rating = 8
                        },
                        new
                        {
                            Id = 11,
                            Comment = "i am gona recommend to all i know",
                            MovieId = 11,
                            Rating = 9
                        },
                        new
                        {
                            Id = 12,
                            Comment = "act better or i am gonna not gona watch you movies again",
                            MovieId = 12,
                            Rating = 2
                        },
                        new
                        {
                            Id = 13,
                            Comment = "this is the worst movie ever",
                            MovieId = 13,
                            Rating = 1
                        });
                });

            modelBuilder.Entity("xxx.Repository.Models.Movie", b =>
                {
                    b.HasOne("xxx.Repository.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xxx.Repository.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("xxx.Repository.Models.Review", b =>
                {
                    b.HasOne("xxx.Repository.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("xxx.Repository.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("xxx.Repository.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("xxx.Repository.Models.Movie", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
